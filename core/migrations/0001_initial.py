# Generated by Django 5.0.6 on 2025-02-28 19:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('calorias', models.PositiveIntegerField()),
                ('proteinas', models.DecimalField(decimal_places=2, max_digits=5)),
                ('gorduras', models.DecimalField(decimal_places=2, max_digits=5)),
                ('carboidratos', models.DecimalField(decimal_places=2, max_digits=5)),
                ('categoria', models.CharField(choices=[('C', 'Café da manhã'), ('A', 'Almoço'), ('J', 'Jantar'), ('L', 'Lanche')], max_length=1)),
                ('porcao', models.DecimalField(decimal_places=2, help_text='Porção em gramas', max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chave', models.CharField(max_length=64, unique=True)),
                ('nivel_acesso', models.CharField(choices=[('read', 'Somente Leitura'), ('write', 'Leitura e Escrita'), ('training', 'Treinamento')], max_length=10)),
                ('ativo', models.BooleanField(default=True)),
                ('total_requisicoes', models.IntegerField(default=0)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('data_ultima_requisicao', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Chave de API',
                'verbose_name_plural': 'Chaves de API',
            },
        ),
        migrations.CreateModel(
            name='ConfiguracaoIA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('ativa', models.BooleanField(default=False)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('peso_feedback', models.FloatField(default=0.5, help_text='Peso do feedback do usuário no cálculo do score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('score_base', models.FloatField(default=5.0, help_text='Score base para alimentos sem histórico', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('bonus_preferido', models.FloatField(default=2.0, help_text='Bônus no score para alimentos preferidos')),
                ('ajuste_porcao_min', models.FloatField(default=0.5, help_text='Fator mínimo para ajuste de porção')),
                ('ajuste_porcao_max', models.FloatField(default=2.0, help_text='Fator máximo para ajuste de porção')),
                ('dist_calorias_cafe', models.FloatField(default=0.25, help_text='Proporção de calorias para o café da manhã', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dist_calorias_almoco', models.FloatField(default=0.35, help_text='Proporção de calorias para o almoço', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dist_calorias_jantar', models.FloatField(default=0.35, help_text='Proporção de calorias para o jantar', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dist_calorias_lanche', models.FloatField(default=0.05, help_text='Proporção de calorias para lanches', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
            options={
                'verbose_name': 'Configuração da IA',
                'verbose_name_plural': 'Configurações da IA',
            },
        ),
        migrations.CreateModel(
            name='DocumentoTreinamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200)),
                ('tipo', models.CharField(choices=[('PDF', 'PDF'), ('TXT', 'TXT'), ('CSV', 'CSV'), ('JSON', 'JSON')], max_length=4)),
                ('arquivo', models.FileField(upload_to='documentos_treinamento/')),
                ('texto_extraido', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pendente', 'Pendente'), ('processando', 'Processando'), ('processado', 'Processado'), ('erro', 'Erro')], default='pendente', max_length=20)),
                ('data_upload', models.DateTimeField(auto_now_add=True)),
                ('data_processamento', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Documento de Treinamento',
                'verbose_name_plural': 'Documentos de Treinamento',
            },
        ),
        migrations.CreateModel(
            name='ModeloIA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200)),
                ('tipo', models.CharField(choices=[('nutricao', 'Nutrição'), ('exercicios', 'Exercícios'), ('suplementacao', 'Suplementação')], max_length=20)),
                ('versao', models.CharField(max_length=50)),
                ('parametros', models.JSONField()),
                ('status', models.CharField(choices=[('nao_treinado', 'Não Treinado'), ('treinando', 'Treinando'), ('treinado', 'Treinado'), ('erro', 'Erro')], default='nao_treinado', max_length=20)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('data_ultimo_treinamento', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Modelo de IA',
                'verbose_name_plural': 'Modelos de IA',
            },
        ),
        migrations.CreateModel(
            name='AlimentoPersonalizado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('tipo', models.CharField(choices=[('P', 'Preferido'), ('R', 'Restrito')], max_length=1)),
                ('motivo', models.TextField(blank=True, help_text='Motivo da restrição ou preferência')),
                ('data_adicao', models.DateTimeField(auto_now_add=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alimentos_personalizados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alimento Personalizado',
                'verbose_name_plural': 'Alimentos Personalizados',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Assinatura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plano', models.CharField(choices=[('B', 'Básico'), ('P', 'Premium'), ('E', 'Enterprise')], max_length=1)),
                ('status', models.CharField(choices=[('A', 'Ativa'), ('I', 'Inativa'), ('P', 'Pendente'), ('C', 'Cancelada')], max_length=1)),
                ('data_inicio', models.DateTimeField(auto_now_add=True)),
                ('data_fim', models.DateTimeField(blank=True, null=True)),
                ('valor_mensal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Assinatura',
                'verbose_name_plural': 'Assinaturas',
            },
        ),
        migrations.CreateModel(
            name='DietaSugerida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('almoco', models.ManyToManyField(related_name='dietas_almoco', to='core.alimento')),
                ('cafe_manha', models.ManyToManyField(related_name='dietas_cafe', to='core.alimento')),
                ('jantar', models.ManyToManyField(related_name='dietas_jantar', to='core.alimento')),
                ('lanche', models.ManyToManyField(related_name='dietas_lanche', to='core.alimento')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DietaFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('satisfacao', models.IntegerField(choices=[(1, 'Muito Insatisfeito'), (2, 'Insatisfeito'), (3, 'Neutro'), (4, 'Satisfeito'), (5, 'Muito Satisfeito')])),
                ('aderencia', models.IntegerField(choices=[(1, 'Não Segui'), (2, 'Segui Parcialmente'), (3, 'Segui Totalmente')])),
                ('comentarios', models.TextField(blank=True)),
                ('data_feedback', models.DateTimeField(auto_now_add=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dieta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='core.dietasugerida')),
            ],
            options={
                'verbose_name': 'Feedback de Dieta',
                'verbose_name_plural': 'Feedbacks de Dietas',
                'ordering': ['-data_feedback'],
            },
        ),
        migrations.CreateModel(
            name='LogTreinamentoIA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('G', 'Geração de Dieta'), ('F', 'Feedback'), ('A', 'Ajuste de Parâmetros')], max_length=1)),
                ('status', models.CharField(choices=[('S', 'Sucesso'), ('E', 'Erro'), ('A', 'Alerta')], max_length=1)),
                ('data', models.DateTimeField(auto_now_add=True)),
                ('mensagem', models.TextField()),
                ('dados', models.JSONField(blank=True, null=True)),
                ('configuracao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.configuracaoia')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log de Treinamento',
                'verbose_name_plural': 'Logs de Treinamento',
                'ordering': ['-data'],
            },
        ),
        migrations.CreateModel(
            name='Pagamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10)),
                ('data', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('P', 'Pendente'), ('A', 'Aprovado'), ('R', 'Recusado'), ('C', 'Cancelado')], max_length=1)),
                ('codigo_transacao', models.CharField(blank=True, max_length=100, null=True)),
                ('detalhes', models.JSONField(blank=True, null=True)),
                ('assinatura', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.assinatura')),
            ],
            options={
                'verbose_name': 'Pagamento',
                'verbose_name_plural': 'Pagamentos',
                'ordering': ['-data'],
            },
        ),
        migrations.CreateModel(
            name='PerfilUsuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idade', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('genero', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1)),
                ('altura', models.PositiveIntegerField(help_text='Altura em centímetros')),
                ('peso', models.DecimalField(decimal_places=2, help_text='Peso em kg', max_digits=5)),
                ('nivel_atividade', models.CharField(choices=[('S', 'Sedentário'), ('L', 'Levemente ativo'), ('M', 'Moderadamente ativo'), ('V', 'Muito ativo'), ('E', 'Extra ativo')], max_length=1)),
                ('objetivo', models.CharField(choices=[('P', 'Perder peso'), ('M', 'Manter peso'), ('G', 'Ganhar peso')], max_length=1)),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
